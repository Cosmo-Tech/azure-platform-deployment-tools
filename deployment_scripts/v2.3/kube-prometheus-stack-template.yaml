namespace: $MONITORING_NAMESPACE_VAR
name: cosmotech-api-latest
labels:
  networking/traffic-allowed: "yes"
defaultRules:
  create: true
alertmanager:
  enabled: true
  alertmanagerSpec:
    logLevel: info
    tolerations:
      - key: "vendor"
        operator: "Equal"
        value: "cosmotech"
        effect: "NoSchedule"
    nodeSelector:
      "cosmotech.com/tier": "monitoring"
    podMetadata:
      labels:
        networking/traffic-allowed: "yes"
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 1
        memory: 400Mi
grafana:
  enabled: true
  grafana.ini:
    server:
      domain: localhost
      root_url: "%(protocol)s://%(domain)s/monitoring"
      serve_from_sub_path: true
  ingress:
    enabled: true
    path: "/monitoring"
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - "localhost"
  plugins:
    - redis-datasource
  adminPassword: $PROM_ADMIN_PASSWORD_VAR
  defaultDashboardsEnabled: true
  additionalDataSources:
    - name: cosmotech-redis
      orgId: 1
      type: redis-datasource
      access: proxy
      url: redis://$REDIS_HOST_VAR:$REDIS_PORT_VAR
      basicAuth: false
      withCredentials: false
      isDefault: false
      version: 1
      editable: false
      secureJsonData:
        password: $REDIS_ADMIN_PASSWORD_VAR
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      redis:
        gnetId: 12776
        revision: 2
        datasource: cosmotech-redis
      argo:
        gnetId: 14136
        revision: 1
        datasource: Prometheus
      nginx:
        gnetId: 9614
        revision: 1
        datasource: Prometheus
      minio:
        gnetId: 15305
        revision: 1
        datasource: Prometheus
      postgresql:
        gnetId: 9628
        revision: 7
        datasource: Prometheus
      csm_licensing:
        url: "https://raw.githubusercontent.com/Cosmo-Tech/azure-platform-deployment-tools/main/grafana/cosmotech_licensing/v6/cosmotech_licensing.json"
      csm_customer_success:
        url: "https://raw.githubusercontent.com/Cosmo-Tech/azure-platform-deployment-tools/main/grafana/customer_success/v1/customer_success.json"
      csm_api:
        url: "https://raw.githubusercontent.com/Cosmo-Tech/azure-platform-deployment-tools/main/grafana/cosmotech_api/v1/cosmotech_api.json"
  tolerations:
    - key: "vendor"
      operator: "Equal"
      value: "cosmotech"
      effect: "NoSchedule"
  nodeSelector:
    "cosmotech.com/tier": "monitoring"
kubeApiServer:
  enabled: true
kubelet:
  enabled: true
kubeControllerManager:
  enabled: true
coreDns:
  enabled: true
kubeEtcd:
  enabled: true
kubeScheduler:
  enabled: true
kubeStateMetrics:
  enabled: true
kube-state-metrics:
  tolerations:
      - key: "vendor"
        operator: "Equal"
        value: "cosmotech"
        effect: "NoSchedule"
  nodeSelector:
    "cosmotech.com/tier": "monitoring"
  podMetadata:
    labels:
      networking/traffic-allowed: "yes"
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 1
      memory: 400Mi
nodeExporter:
  enabled: true
prometheusOperator:
  tolerations:
    - key: "vendor"
      operator: "Equal"
      value: "cosmotech"
      effect: "NoSchedule"
  nodeSelector:
    "cosmotech.com/tier": "monitoring"
  admissionWebhooks:
    patch:
      labels:
        networking/traffic-allowed: "yes"
      nodeSelector:
        "cosmotech.com/tier": "monitoring"
      tolerations:
        - key: "vendor"
          operator: "Equal"
          value: "cosmotech"
          effect: "NoSchedule"
prometheus:
  enabled: true
  crname: prometheus
  serviceAccount:
    create: true
    name: prometheus-service-account
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    logLevel: info
    replicas: $PROM_REPLICAS_NUMBER_VAR
    tolerations:
      - key: "vendor"
        operator: "Equal"
        value: "cosmotech"
        effect: "NoSchedule"
    nodeSelector:
      "cosmotech.com/tier": "monitoring"
    podMetadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: prometheus
    resources:
      limits:
        cpu: 1
        memory: $PROM_CPU_MEM_LIMITS_VAR
      requests:
        cpu: 1
        memory: $PROM_CPU_MEM_REQUESTS_VAR
    retention: 365d
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: $PROM_STORAGE_CLASS_NAME_VAR
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: $PROM_STORAGE_RESOURCE_REQUEST_VAR
  additionalServiceMonitors:
    - name: cosmotech-latest
      additionalLabels:
        serviceMonitorSelector: prometheus
      endpoints:
        - interval: 30s
          targetPort: 8081
          path: /actuator/prometheus
      namespaceSelector:
        matchNames:
        - phoenix
      selector:
        matchLabels:
          app.kubernetes.io/instance: cosmotech-api-latest
    - name: cosmotech-v1
      additionalLabels:
        serviceMonitorSelector: prometheus
      endpoints:
        - interval: 30s
          targetPort: 8081
          path: /actuator/prometheus
      namespaceSelector:
        matchNames:
        - phoenix
      selector:
        matchLabels:
          app.kubernetes.io/instance: cosmotech-api-v1
