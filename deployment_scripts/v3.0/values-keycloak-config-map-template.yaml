podLabels:
  networking/traffic-allowed: "yes"
httpRelativePath: "/auth/"
auth:
  adminUser: $KEYCLOAK_ADM_USERNAME_VAR
  adminPassword: $KEYCLOAK_ADM_PASSWORD_VAR
service:
  type: NodePort
ingress:
  enabled: true
  pathType: Prefix
  apiVersion: ""
  hostname: localhost
  path: /auth
  servicePort: 80
  annotations:
    kubernetes.io/ingress.class: nginx
    ##cert-manager.io/cluster-issuer: cluster-issuer-name
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.org/client-max-body-size: "0"
  tls: true
  selfSigned: true
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []
resources:
  requests:
    cpu: 500m
    memory: 2Gi
  limits:
    cpu: 1000m
    memory: 6Gi
nodeSelector:
  "cosmotech.com/tier": "services"
tolerations:
  - key: "vendor"
    operator: "Equal"
    value: "cosmotech"
    effect: "NoSchedule"
keycloakConfigCli:
  enabled: true
  # existingConfigmap: "csm-keycloak-map"
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
  nodeSelector:
    "cosmotech.com/tier": "services"
  podTolerations:
    - key: "vendor"
      operator: "Equal"
      value: "cosmotech"
      effect: "NoSchedule"

postgresql:
  enabled: true
  auth:
    postgresPassword: $KEYCLOAK_DB_PASS_VAR
    username: keycloak
    password: $KEYCLOAK_DB_USER_PASS_VAR
    database: keycloak
  primary:
    tolerations:
      - key: "vendor"
        operator: "Equal"
        value: "cosmotech"
        effect: "NoSchedule"
    nodeSelector:
      "cosmotech.com/tier": "db"
    podLabels:
      networking/traffic-allowed: "yes"
  readReplicas:
    nodeSelector:
      "cosmotech.com/tier": "db"
    tolerations:
      - key: "vendor"
        operator: "Equal"
        value: "cosmotech"
        effect: "NoSchedule"
    podLabels:
      networking/traffic-allowed: "yes"
  resources:
    requests:
      memory: "64Mi"
      cpu: "250m"
    limits:
      memory: "256Mi"
      cpu: "1"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: "cosmotech-monitoring"
      interval: 30s
      scrapeTimeout: 10s
metrics:
  enabled: true
  service:
    ports:
      http: 8080
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.http }}"
  serviceMonitor:
    enabled: true
    port: http
    endpoints:
      - path: /metrics
      - path: /realms/master/metrics
    path: ""
    namespace: "cosmotech-monitoring"
    interval: 30s
    scrapeTimeout: 10s
